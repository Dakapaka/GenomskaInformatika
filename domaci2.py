# -*- coding: utf-8 -*-
"""domaci2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xeALArggieABT1_3uEhz7ellbKpVQboA
"""

pip install pysam

import pysam

bam_file_path = "/content/merged-tumor.bam"

alignment_file = pysam.AlignmentFile(bam_file_path, "rb")

first_read = next(alignment_file)

aligned_segment_fields = first_read.to_dict()

print("Fields in the AlignedSegment:")
for field, value in aligned_segment_fields.items():
    print(f"{field}: {value}")

flag_value = first_read.flag

print("\nFlag value for the first read:", flag_value)

flags = bin(flag_value)[2:].zfill(12)
flag_descriptions = {
    0: "read paired",
    1: "read mapped in proper pair",
    2: "read unmapped",
    3: "mate unmapped",
    4: "read reverse strand",
    5: "mate reverse strand",
    6: "first in pair",
    7: "second in pair",
    8: "not primary alignment",
    9: "read fails platform/vendor quality checks",
    10: "read is PCR or optical duplicate",
    11: "supplementary alignment"
}

print("\nFlag values for the first read:")
for i, flag_bit in enumerate(reversed(flags)):
    if flag_bit == '1':
        print(flag_descriptions[i])

import pysam

bam_file_path = "/content/merged-tumor.bam"

alignment_file = pysam.AlignmentFile(bam_file_path, "rb")

total_reads = 0
unmapped_reads = 0
reads_with_zero_mapq = 0
total_mapq = 0
total_mapq_filtered = 0
num_reads_filtered = 0

for read in alignment_file:
    total_reads += 1
    total_mapq += read.mapping_quality

    if read.is_unmapped:
        unmapped_reads += 1

    if read.mapping_quality == 0:
        reads_with_zero_mapq += 1

    if read.mapping_quality != 0:
        total_mapq_filtered += read.mapping_quality
        num_reads_filtered += 1

alignment_file.close()

average_mapq = total_mapq / total_reads

average_mapq_filtered = total_mapq_filtered / num_reads_filtered if num_reads_filtered > 0 else 0

print("Total number of reads:", total_reads)
print("Number of unmapped reads:", unmapped_reads)
print("Number of reads with mapping quality 0:", reads_with_zero_mapq)
print("Average mapping quality for all reads:", average_mapq)
print("Average mapping quality if reads with 0 mapq are filtered out:", average_mapq_filtered)